// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"newsfeed/ent/react"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// React is the model entity for the React schema.
type React struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReactType holds the value of the "react_type" field.
	ReactType string `json:"react_type,omitempty"`
	// PostType holds the value of the "post_type" field.
	PostType string `json:"post_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReactQuery when eager-loading is set.
	Edges             ReactEdges `json:"edges"`
	user_reacted_user *int
	selectValues      sql.SelectValues
}

// ReactEdges holds the relations/edges for other nodes in the graph.
type ReactEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// ReactedUser holds the value of the reacted_user edge.
	ReactedUser []*Comment `json:"reacted_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e ReactEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ReactEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// ReactedUserOrErr returns the ReactedUser value or an error if the edge
// was not loaded in eager-loading.
func (e ReactEdges) ReactedUserOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.ReactedUser, nil
	}
	return nil, &NotLoadedError{edge: "reacted_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*React) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case react.FieldID:
			values[i] = new(sql.NullInt64)
		case react.FieldReactType, react.FieldPostType:
			values[i] = new(sql.NullString)
		case react.FieldCreatedAt, react.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case react.ForeignKeys[0]: // user_reacted_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the React fields.
func (r *React) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case react.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case react.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case react.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case react.FieldReactType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field react_type", values[i])
			} else if value.Valid {
				r.ReactType = value.String
			}
		case react.FieldPostType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_type", values[i])
			} else if value.Valid {
				r.PostType = value.String
			}
		case react.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_reacted_user", value)
			} else if value.Valid {
				r.user_reacted_user = new(int)
				*r.user_reacted_user = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the React.
// This includes values selected through modifiers, order, etc.
func (r *React) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryPosts queries the "posts" edge of the React entity.
func (r *React) QueryPosts() *PostQuery {
	return NewReactClient(r.config).QueryPosts(r)
}

// QueryComments queries the "comments" edge of the React entity.
func (r *React) QueryComments() *CommentQuery {
	return NewReactClient(r.config).QueryComments(r)
}

// QueryReactedUser queries the "reacted_user" edge of the React entity.
func (r *React) QueryReactedUser() *CommentQuery {
	return NewReactClient(r.config).QueryReactedUser(r)
}

// Update returns a builder for updating this React.
// Note that you need to call React.Unwrap() before calling this method if this React
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *React) Update() *ReactUpdateOne {
	return NewReactClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the React entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *React) Unwrap() *React {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: React is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *React) String() string {
	var builder strings.Builder
	builder.WriteString("React(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("react_type=")
	builder.WriteString(r.ReactType)
	builder.WriteString(", ")
	builder.WriteString("post_type=")
	builder.WriteString(r.PostType)
	builder.WriteByte(')')
	return builder.String()
}

// Reacts is a parsable slice of React.
type Reacts []*React
