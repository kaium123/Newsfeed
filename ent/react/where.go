// Code generated by ent, DO NOT EDIT.

package react

import (
	"newsfeed/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.React {
	return predicate.React(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.React {
	return predicate.React(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.React {
	return predicate.React(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.React {
	return predicate.React(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.React {
	return predicate.React(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.React {
	return predicate.React(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.React {
	return predicate.React(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.React {
	return predicate.React(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.React {
	return predicate.React(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.React {
	return predicate.React(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.React {
	return predicate.React(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReactType applies equality check predicate on the "react_type" field. It's identical to ReactTypeEQ.
func ReactType(v string) predicate.React {
	return predicate.React(sql.FieldEQ(FieldReactType, v))
}

// PostType applies equality check predicate on the "post_type" field. It's identical to PostTypeEQ.
func PostType(v string) predicate.React {
	return predicate.React(sql.FieldEQ(FieldPostType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.React {
	return predicate.React(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.React {
	return predicate.React(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.React {
	return predicate.React(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.React {
	return predicate.React(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.React {
	return predicate.React(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.React {
	return predicate.React(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.React {
	return predicate.React(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.React {
	return predicate.React(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.React {
	return predicate.React(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.React {
	return predicate.React(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.React {
	return predicate.React(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.React {
	return predicate.React(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.React {
	return predicate.React(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.React {
	return predicate.React(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.React {
	return predicate.React(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.React {
	return predicate.React(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReactTypeEQ applies the EQ predicate on the "react_type" field.
func ReactTypeEQ(v string) predicate.React {
	return predicate.React(sql.FieldEQ(FieldReactType, v))
}

// ReactTypeNEQ applies the NEQ predicate on the "react_type" field.
func ReactTypeNEQ(v string) predicate.React {
	return predicate.React(sql.FieldNEQ(FieldReactType, v))
}

// ReactTypeIn applies the In predicate on the "react_type" field.
func ReactTypeIn(vs ...string) predicate.React {
	return predicate.React(sql.FieldIn(FieldReactType, vs...))
}

// ReactTypeNotIn applies the NotIn predicate on the "react_type" field.
func ReactTypeNotIn(vs ...string) predicate.React {
	return predicate.React(sql.FieldNotIn(FieldReactType, vs...))
}

// ReactTypeGT applies the GT predicate on the "react_type" field.
func ReactTypeGT(v string) predicate.React {
	return predicate.React(sql.FieldGT(FieldReactType, v))
}

// ReactTypeGTE applies the GTE predicate on the "react_type" field.
func ReactTypeGTE(v string) predicate.React {
	return predicate.React(sql.FieldGTE(FieldReactType, v))
}

// ReactTypeLT applies the LT predicate on the "react_type" field.
func ReactTypeLT(v string) predicate.React {
	return predicate.React(sql.FieldLT(FieldReactType, v))
}

// ReactTypeLTE applies the LTE predicate on the "react_type" field.
func ReactTypeLTE(v string) predicate.React {
	return predicate.React(sql.FieldLTE(FieldReactType, v))
}

// ReactTypeContains applies the Contains predicate on the "react_type" field.
func ReactTypeContains(v string) predicate.React {
	return predicate.React(sql.FieldContains(FieldReactType, v))
}

// ReactTypeHasPrefix applies the HasPrefix predicate on the "react_type" field.
func ReactTypeHasPrefix(v string) predicate.React {
	return predicate.React(sql.FieldHasPrefix(FieldReactType, v))
}

// ReactTypeHasSuffix applies the HasSuffix predicate on the "react_type" field.
func ReactTypeHasSuffix(v string) predicate.React {
	return predicate.React(sql.FieldHasSuffix(FieldReactType, v))
}

// ReactTypeIsNil applies the IsNil predicate on the "react_type" field.
func ReactTypeIsNil() predicate.React {
	return predicate.React(sql.FieldIsNull(FieldReactType))
}

// ReactTypeNotNil applies the NotNil predicate on the "react_type" field.
func ReactTypeNotNil() predicate.React {
	return predicate.React(sql.FieldNotNull(FieldReactType))
}

// ReactTypeEqualFold applies the EqualFold predicate on the "react_type" field.
func ReactTypeEqualFold(v string) predicate.React {
	return predicate.React(sql.FieldEqualFold(FieldReactType, v))
}

// ReactTypeContainsFold applies the ContainsFold predicate on the "react_type" field.
func ReactTypeContainsFold(v string) predicate.React {
	return predicate.React(sql.FieldContainsFold(FieldReactType, v))
}

// PostTypeEQ applies the EQ predicate on the "post_type" field.
func PostTypeEQ(v string) predicate.React {
	return predicate.React(sql.FieldEQ(FieldPostType, v))
}

// PostTypeNEQ applies the NEQ predicate on the "post_type" field.
func PostTypeNEQ(v string) predicate.React {
	return predicate.React(sql.FieldNEQ(FieldPostType, v))
}

// PostTypeIn applies the In predicate on the "post_type" field.
func PostTypeIn(vs ...string) predicate.React {
	return predicate.React(sql.FieldIn(FieldPostType, vs...))
}

// PostTypeNotIn applies the NotIn predicate on the "post_type" field.
func PostTypeNotIn(vs ...string) predicate.React {
	return predicate.React(sql.FieldNotIn(FieldPostType, vs...))
}

// PostTypeGT applies the GT predicate on the "post_type" field.
func PostTypeGT(v string) predicate.React {
	return predicate.React(sql.FieldGT(FieldPostType, v))
}

// PostTypeGTE applies the GTE predicate on the "post_type" field.
func PostTypeGTE(v string) predicate.React {
	return predicate.React(sql.FieldGTE(FieldPostType, v))
}

// PostTypeLT applies the LT predicate on the "post_type" field.
func PostTypeLT(v string) predicate.React {
	return predicate.React(sql.FieldLT(FieldPostType, v))
}

// PostTypeLTE applies the LTE predicate on the "post_type" field.
func PostTypeLTE(v string) predicate.React {
	return predicate.React(sql.FieldLTE(FieldPostType, v))
}

// PostTypeContains applies the Contains predicate on the "post_type" field.
func PostTypeContains(v string) predicate.React {
	return predicate.React(sql.FieldContains(FieldPostType, v))
}

// PostTypeHasPrefix applies the HasPrefix predicate on the "post_type" field.
func PostTypeHasPrefix(v string) predicate.React {
	return predicate.React(sql.FieldHasPrefix(FieldPostType, v))
}

// PostTypeHasSuffix applies the HasSuffix predicate on the "post_type" field.
func PostTypeHasSuffix(v string) predicate.React {
	return predicate.React(sql.FieldHasSuffix(FieldPostType, v))
}

// PostTypeIsNil applies the IsNil predicate on the "post_type" field.
func PostTypeIsNil() predicate.React {
	return predicate.React(sql.FieldIsNull(FieldPostType))
}

// PostTypeNotNil applies the NotNil predicate on the "post_type" field.
func PostTypeNotNil() predicate.React {
	return predicate.React(sql.FieldNotNull(FieldPostType))
}

// PostTypeEqualFold applies the EqualFold predicate on the "post_type" field.
func PostTypeEqualFold(v string) predicate.React {
	return predicate.React(sql.FieldEqualFold(FieldPostType, v))
}

// PostTypeContainsFold applies the ContainsFold predicate on the "post_type" field.
func PostTypeContainsFold(v string) predicate.React {
	return predicate.React(sql.FieldContainsFold(FieldPostType, v))
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PostsTable, PostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CommentsTable, CommentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactedUser applies the HasEdge predicate on the "reacted_user" edge.
func HasReactedUser() predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReactedUserTable, ReactedUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactedUserWith applies the HasEdge predicate on the "reacted_user" edge with a given conditions (other predicates).
func HasReactedUserWith(preds ...predicate.Comment) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		step := newReactedUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.React) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.React) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.React) predicate.React {
	return predicate.React(func(s *sql.Selector) {
		p(s.Not())
	})
}
