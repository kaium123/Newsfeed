// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newsfeed/ent/attachment"
	"newsfeed/ent/comment"
	"newsfeed/ent/post"
	"newsfeed/ent/predicate"
	"newsfeed/ent/react"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *CommentUpdate) ClearContent() *CommentUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetParentCommentID sets the "parent_comment_id" field.
func (cu *CommentUpdate) SetParentCommentID(i int) *CommentUpdate {
	cu.mutation.ResetParentCommentID()
	cu.mutation.SetParentCommentID(i)
	return cu
}

// SetNillableParentCommentID sets the "parent_comment_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentCommentID(i *int) *CommentUpdate {
	if i != nil {
		cu.SetParentCommentID(*i)
	}
	return cu
}

// AddParentCommentID adds i to the "parent_comment_id" field.
func (cu *CommentUpdate) AddParentCommentID(i int) *CommentUpdate {
	cu.mutation.AddParentCommentID(i)
	return cu
}

// ClearParentCommentID clears the value of the "parent_comment_id" field.
func (cu *CommentUpdate) ClearParentCommentID() *CommentUpdate {
	cu.mutation.ClearParentCommentID()
	return cu
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (cu *CommentUpdate) AddAttachmentIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddAttachmentIDs(ids...)
	return cu
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (cu *CommentUpdate) AddAttachments(a ...*Attachment) *CommentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAttachmentIDs(ids...)
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (cu *CommentUpdate) AddPostIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddPostIDs(ids...)
	return cu
}

// AddPost adds the "post" edges to the Post entity.
func (cu *CommentUpdate) AddPost(p ...*Post) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPostIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (cu *CommentUpdate) AddReactIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddReactIDs(ids...)
	return cu
}

// AddReacts adds the "reacts" edges to the React entity.
func (cu *CommentUpdate) AddReacts(r ...*React) *CommentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReactIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (cu *CommentUpdate) ClearAttachments() *CommentUpdate {
	cu.mutation.ClearAttachments()
	return cu
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (cu *CommentUpdate) RemoveAttachmentIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveAttachmentIDs(ids...)
	return cu
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (cu *CommentUpdate) RemoveAttachments(a ...*Attachment) *CommentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAttachmentIDs(ids...)
}

// ClearPost clears all "post" edges to the Post entity.
func (cu *CommentUpdate) ClearPost() *CommentUpdate {
	cu.mutation.ClearPost()
	return cu
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (cu *CommentUpdate) RemovePostIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemovePostIDs(ids...)
	return cu
}

// RemovePost removes "post" edges to Post entities.
func (cu *CommentUpdate) RemovePost(p ...*Post) *CommentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePostIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (cu *CommentUpdate) ClearReacts() *CommentUpdate {
	cu.mutation.ClearReacts()
	return cu
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (cu *CommentUpdate) RemoveReactIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveReactIDs(ids...)
	return cu
}

// RemoveReacts removes "reacts" edges to React entities.
func (cu *CommentUpdate) RemoveReacts(r ...*React) *CommentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CommentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.ParentCommentID(); ok {
		_spec.SetField(comment.FieldParentCommentID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedParentCommentID(); ok {
		_spec.AddField(comment.FieldParentCommentID, field.TypeInt, value)
	}
	if cu.mutation.ParentCommentIDCleared() {
		_spec.ClearField(comment.FieldParentCommentID, field.TypeInt)
	}
	if cu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !cu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPostIDs(); len(nodes) > 0 && !cu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedReactsIDs(); len(nodes) > 0 && !cu.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *CommentUpdateOne) ClearContent() *CommentUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetParentCommentID sets the "parent_comment_id" field.
func (cuo *CommentUpdateOne) SetParentCommentID(i int) *CommentUpdateOne {
	cuo.mutation.ResetParentCommentID()
	cuo.mutation.SetParentCommentID(i)
	return cuo
}

// SetNillableParentCommentID sets the "parent_comment_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentCommentID(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetParentCommentID(*i)
	}
	return cuo
}

// AddParentCommentID adds i to the "parent_comment_id" field.
func (cuo *CommentUpdateOne) AddParentCommentID(i int) *CommentUpdateOne {
	cuo.mutation.AddParentCommentID(i)
	return cuo
}

// ClearParentCommentID clears the value of the "parent_comment_id" field.
func (cuo *CommentUpdateOne) ClearParentCommentID() *CommentUpdateOne {
	cuo.mutation.ClearParentCommentID()
	return cuo
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (cuo *CommentUpdateOne) AddAttachmentIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddAttachmentIDs(ids...)
	return cuo
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (cuo *CommentUpdateOne) AddAttachments(a ...*Attachment) *CommentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAttachmentIDs(ids...)
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (cuo *CommentUpdateOne) AddPostIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddPostIDs(ids...)
	return cuo
}

// AddPost adds the "post" edges to the Post entity.
func (cuo *CommentUpdateOne) AddPost(p ...*Post) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPostIDs(ids...)
}

// AddReactIDs adds the "reacts" edge to the React entity by IDs.
func (cuo *CommentUpdateOne) AddReactIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddReactIDs(ids...)
	return cuo
}

// AddReacts adds the "reacts" edges to the React entity.
func (cuo *CommentUpdateOne) AddReacts(r ...*React) *CommentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReactIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (cuo *CommentUpdateOne) ClearAttachments() *CommentUpdateOne {
	cuo.mutation.ClearAttachments()
	return cuo
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (cuo *CommentUpdateOne) RemoveAttachmentIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveAttachmentIDs(ids...)
	return cuo
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (cuo *CommentUpdateOne) RemoveAttachments(a ...*Attachment) *CommentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAttachmentIDs(ids...)
}

// ClearPost clears all "post" edges to the Post entity.
func (cuo *CommentUpdateOne) ClearPost() *CommentUpdateOne {
	cuo.mutation.ClearPost()
	return cuo
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (cuo *CommentUpdateOne) RemovePostIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemovePostIDs(ids...)
	return cuo
}

// RemovePost removes "post" edges to Post entities.
func (cuo *CommentUpdateOne) RemovePost(p ...*Post) *CommentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePostIDs(ids...)
}

// ClearReacts clears all "reacts" edges to the React entity.
func (cuo *CommentUpdateOne) ClearReacts() *CommentUpdateOne {
	cuo.mutation.ClearReacts()
	return cuo
}

// RemoveReactIDs removes the "reacts" edge to React entities by IDs.
func (cuo *CommentUpdateOne) RemoveReactIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveReactIDs(ids...)
	return cuo
}

// RemoveReacts removes "reacts" edges to React entities.
func (cuo *CommentUpdateOne) RemoveReacts(r ...*React) *CommentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReactIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CommentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.ParentCommentID(); ok {
		_spec.SetField(comment.FieldParentCommentID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedParentCommentID(); ok {
		_spec.AddField(comment.FieldParentCommentID, field.TypeInt, value)
	}
	if cuo.mutation.ParentCommentIDCleared() {
		_spec.ClearField(comment.FieldParentCommentID, field.TypeInt)
	}
	if cuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !cuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.AttachmentsTable,
			Columns: comment.AttachmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPostIDs(); len(nodes) > 0 && !cuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedReactsIDs(); len(nodes) > 0 && !cuo.mutation.ReactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.ReactsTable,
			Columns: comment.ReactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
