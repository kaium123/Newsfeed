// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"newsfeed/ent/comment"
	"newsfeed/ent/post"
	"newsfeed/ent/react"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReactCreate is the builder for creating a React entity.
type ReactCreate struct {
	config
	mutation *ReactMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReactCreate) SetCreatedAt(t time.Time) *ReactCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReactCreate) SetNillableCreatedAt(t *time.Time) *ReactCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReactCreate) SetUpdatedAt(t time.Time) *ReactCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReactCreate) SetNillableUpdatedAt(t *time.Time) *ReactCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetReactType sets the "react_type" field.
func (rc *ReactCreate) SetReactType(s string) *ReactCreate {
	rc.mutation.SetReactType(s)
	return rc
}

// SetNillableReactType sets the "react_type" field if the given value is not nil.
func (rc *ReactCreate) SetNillableReactType(s *string) *ReactCreate {
	if s != nil {
		rc.SetReactType(*s)
	}
	return rc
}

// SetPostType sets the "post_type" field.
func (rc *ReactCreate) SetPostType(s string) *ReactCreate {
	rc.mutation.SetPostType(s)
	return rc
}

// SetNillablePostType sets the "post_type" field if the given value is not nil.
func (rc *ReactCreate) SetNillablePostType(s *string) *ReactCreate {
	if s != nil {
		rc.SetPostType(*s)
	}
	return rc
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (rc *ReactCreate) AddPostIDs(ids ...int) *ReactCreate {
	rc.mutation.AddPostIDs(ids...)
	return rc
}

// AddPosts adds the "posts" edges to the Post entity.
func (rc *ReactCreate) AddPosts(p ...*Post) *ReactCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (rc *ReactCreate) AddCommentIDs(ids ...int) *ReactCreate {
	rc.mutation.AddCommentIDs(ids...)
	return rc
}

// AddComments adds the "comments" edges to the Comment entity.
func (rc *ReactCreate) AddComments(c ...*Comment) *ReactCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddCommentIDs(ids...)
}

// AddReactedUserIDs adds the "reacted_user" edge to the Comment entity by IDs.
func (rc *ReactCreate) AddReactedUserIDs(ids ...int) *ReactCreate {
	rc.mutation.AddReactedUserIDs(ids...)
	return rc
}

// AddReactedUser adds the "reacted_user" edges to the Comment entity.
func (rc *ReactCreate) AddReactedUser(c ...*Comment) *ReactCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddReactedUserIDs(ids...)
}

// Mutation returns the ReactMutation object of the builder.
func (rc *ReactCreate) Mutation() *ReactMutation {
	return rc.mutation
}

// Save creates the React in the database.
func (rc *ReactCreate) Save(ctx context.Context) (*React, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReactCreate) SaveX(ctx context.Context) *React {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReactCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReactCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReactCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := react.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := react.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ReactType(); !ok {
		v := react.DefaultReactType
		rc.mutation.SetReactType(v)
	}
	if _, ok := rc.mutation.PostType(); !ok {
		v := react.DefaultPostType
		rc.mutation.SetPostType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReactCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "React.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "React.updated_at"`)}
	}
	return nil
}

func (rc *ReactCreate) sqlSave(ctx context.Context) (*React, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReactCreate) createSpec() (*React, *sqlgraph.CreateSpec) {
	var (
		_node = &React{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(react.Table, sqlgraph.NewFieldSpec(react.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(react.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(react.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.ReactType(); ok {
		_spec.SetField(react.FieldReactType, field.TypeString, value)
		_node.ReactType = value
	}
	if value, ok := rc.mutation.PostType(); ok {
		_spec.SetField(react.FieldPostType, field.TypeString, value)
		_node.PostType = value
	}
	if nodes := rc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   react.PostsTable,
			Columns: react.PostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   react.CommentsTable,
			Columns: react.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ReactedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   react.ReactedUserTable,
			Columns: react.ReactedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReactCreateBulk is the builder for creating many React entities in bulk.
type ReactCreateBulk struct {
	config
	builders []*ReactCreate
}

// Save creates the React entities in the database.
func (rcb *ReactCreateBulk) Save(ctx context.Context) ([]*React, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*React, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReactCreateBulk) SaveX(ctx context.Context) []*React {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReactCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReactCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
